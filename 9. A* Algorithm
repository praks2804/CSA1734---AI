import heapq

class Node:
    def __init__(self, name, neighbors=None):
        self.name = name
        self.neighbors = neighbors or {}
        self.g = float('inf')  # Distance from start node
        self.h = 0  # Heuristic distance to goal
        self.f = float('inf')  # Total cost (g + h)
        self.parent = None

    def __lt__(self, other):
        return self.f < other.f

class Graph:
    def __init__(self):
        self.nodes = {}

    def add_node(self, name):
        self.nodes[name] = Node(name)

    def add_edge(self, from_node, to_node, cost):
        if from_node in self.nodes and to_node in self.nodes:
            self.nodes[from_node].neighbors[self.nodes[to_node]] = cost

def heuristic(node, goal):
    # Example heuristic function (e.g., Manhattan distance)
    # This needs to be tailored based on the problem specifics.
    return abs(ord(node.name) - ord(goal.name))
